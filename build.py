# Copyright 2023 The KerasNLP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import glob
import os
import shutil

import namex

package = "keras_nlp"
build_directory = "build"
to_copy = [
    "setup.py",
    "setup.cfg",
    "README.md",
]

if os.path.exists(build_directory):
    raise ValueError(f"Directory already exists: {build_directory}")

try:
    # Copy sources (`keras_nlp/` directory and setup files) to build directory
    os.mkdir(build_directory)
    shutil.copytree(package, os.path.join(build_directory, package))
    for fname in to_copy:
        shutil.copy(fname, os.path.join(f"{build_directory}", fname))
    os.chdir(build_directory)

    # Restructure the codebase so that source files live in `keras_nlp/src`
    namex.convert_codebase(package, code_directory="src")
    # Generate API __init__.py files in `keras_nlp/`
    namex.generate_api_files(package, code_directory="src", verbose=True)

    # Make sure to export the __version__ string
    from keras_nlp.src import __version__  # noqa: E402

    with open(os.path.join(package, "__init__.py")) as f:
        init_contents = f.read()
    with open(os.path.join(package, "__init__.py"), "w") as f:
        f.write(init_contents + "\n\n" + f'__version__ = "{__version__}"\n')

    # Build the package
    os.system("python3 -m build")

    # Save the dist files generated by the build process
    os.chdir("..")
    if not os.path.exists("dist"):
        os.mkdir("dist")
    for filename in glob.glob(os.path.join(build_directory, "dist", "*.*")):
        shutil.copy(filename, "dist")
    print("Build successful.")
finally:
    # Clean up: remove the build directory (no longer needed)
    shutil.rmtree(build_directory)
