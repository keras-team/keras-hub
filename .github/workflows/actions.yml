name: Tests

on:
  push:
  pull_request:
  release:
    types: [created]
jobs:
  build:
    name: Test the code with tf.keras
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Get pip cache dir
        id: pip-cache
        run: |
          python -m pip install --upgrade pip setuptools
          echo "::set-output name=dir::$(pip cache dir)"
      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Setup SSH Keys and known_hosts
        env:
            SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
            ssh-agent -a $SSH_AUTH_SOCK > /dev/null
            ssh-add - <<< "${{ secrets.KERAS_CORE }}"
      - name: Install dependencies
        env:
            SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          pip install tensorflow==2.12.0
          pip install torch>=2.0.1+cpu
          pip install "jax[cpu]"
          pip install -r requirements.txt --progress-bar off
          pip install -e "." --progress-bar off
          cd ..
          git clone git@github.com:keras-team/keras-core.git
          pip install -r keras-core/requirements.txt --progress-bar off
          python keras-core/pip_build.py --install
          cd keras-nlp
      - name: Test with pytest
        run: |
          pytest --cov=keras_nlp --cov-report xml:coverage.xml keras_nlp/
      - name: Run integration tests
        run: |
          python pip_build.py --install && cd integration_tests && pytest .
  multibackend:
    name: Test the code with Keras Core
    strategy:
      fail-fast: false
      matrix:
        backend: [tensorflow, jax, torch]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Get pip cache dir
      id: pip-cache
      run: |
        python -m pip install --upgrade pip setuptools
        echo "::set-output name=dir::$(pip cache dir)"
    - name: pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Setup SSH Keys and known_hosts
      env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.KERAS_CORE }}"
    - name: Install dependencies
      env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
          pip install tensorflow==2.12.0
          pip install torch>=2.0.1+cpu
          pip install "jax[cpu]"
          pip install -r requirements.txt --progress-bar off
          pip install -e "." --progress-bar off
          cd ..
          git clone git@github.com:keras-team/keras-core.git
          pip install -r keras-core/requirements.txt --progress-bar off
          python keras-core/pip_build.py --install
          cd keras-nlp
    - name: Test with pytest
      env:
        KERAS_BACKEND: ${{ matrix.backend }}
      run: |
        pytest --run_large keras_nlp/layers/modeling
  format:
    name: Check the code format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Get pip cache dir
        id: pip-cache
        run: |
          python -m pip install --upgrade pip setuptools
          echo "::set-output name=dir::$(pip cache dir)"
      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          pip install -r requirements.txt --progress-bar off
          pip install -e "." --progress-bar off
      - name: Lint
        run: bash shell/lint.sh
